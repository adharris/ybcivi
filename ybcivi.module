<?php

/**
 * Implementation of hoox_install
 **/

function ybcivi_install () {

	civicrm_initialize();
	$config =& CRM_Core_Config::singleton( );
	require_once "api/v2/RelationshipType.php";
	require_once "api/v2/CustomGroup.php";

	$site_contact_type_name = "Program";
	$site_staff_relationship_name = "Staff of";
	$site_staff_relationship_name_b = "Site Staff is";
	$custom_group_title = "Relationship Details";
	$custom_group_name = "Relationship_Details";
	$custom_field_name = "Relationship_Roles";
	$custom_field_label = "Relationship Roles";
	
	//find the site staff relationship
	$params = array(
		'contact_type_a' => 'Individual',
		'contact_type_b' => 'Organization',
		'contact_sub_type_b' => $site_contact_type_name,
		'name_a_b' => $site_staff_relationship_name,
	);
	$results = & civicrm_relationship_types_get($params);
	if(count($results) == 1) {
		//The relationship type exists, so we can use its id
		$site_staff_rel_id = $results[0]['id'];
	} elseif(count($results) == 0) {
		//The site staff relationshipt doesnt exist, so lets create it
		$relTypeParams = array(
			'name_a_b' => $site_staff_relationship_name,
			'name_b_a' => $site_staff_relationship_name_b,
			'contact_type_a' => 'Individual',
			'contact_type_b' => 'Organization',
			'contact_sub_type_b' => 'Program',
			'is_reserved' => 0,
			'is_active' => 1,
		);
		$result =  & civicrm_relationship_type_add( $relTypeParams );
	} else {
		//this should probably never happen, but should be handledRelationship_DetailsRelationship_Details
		//TODO: Handle error if multiple site staff relationships exist
	}

	//Find a custom fieldset on relationships called relationship_details
	$results = db_query("SELECT id FROM {civicrm_custom_group} " .
	                    "WHERE name = '%s' " .
											"AND extends = 'Relationship' " .
											"AND extends_entity_column_value LIKE '%s'",
										 	$custom_group_name, "%" . $site_staff_rel_id . "%");
	$data = db_fetch_object($results);
	if($data) {
		//If the custom field group exists, we can use it's id
		$custom_group_id = $data->id;
	} else {
		//Otherwise we need to create the custom field group
		$group_params = array (
			'title' => $custom_group_title,
			'name' => $custom_group_name,
			'extends' => array('Relationship', array($site_staff_rel_id)),
			'weight' => 10,
			'collapse_display' => 0,
			'style' => 'Inline',
			'is_active' => 1,
		);
		$customGroup =& civicrm_custom_group_create($group_params);
		$custom_group_id =  $customGroup['id'];
	}

	//Find a custom field in the option group for the relationship roles
	$results = db_query("SELECT * FROM {civicrm_custom_field} " .
	                    "WHERE custom_group_id = %d " .
										  "AND name = '%s'",
										  $custom_group_id,
										  $custom_field_name);
	$data = db_fetch_object($results);
	if($data) {
		//We have a custom fieldset already, and we are done
	} else {
		//create a custom fieldset
		$custom_field_params = array(
			'custom_group_id' => $custom_group_id,
			'name' => $custom_field_name,
			'label' => $custom_field_label,
			'html_type' => 'CheckBox',
			'data_type' => 'String',
			'weight' => 2,
			'is_required' => 0,
			'is_searchable' => 1,
			'is_active' => 1,
			'option_label' => array('Director', 'Main Data Contact', 'PSE Coordinator'),
			'option_value' => array('director', 'main_data_contact', 'pse_coordinator'),
			'option_weight'=> array(10, 20, 30),
			'option_status' => array(1,1,1),
		);

		$custom_field = & civicrm_custom_field_create($custom_field_params);
	}
	
}

/**
 * Implementation of hook_civicrm_tabs()
 */
function ybcivi_civicrm_tabs ( &$tabs, $contactID ) {

	//initialize civicrm api
	civicrm_initialize();
	$config =& CRM_Core_Config::singleton( );
	require_once "api/v2/Contact.php";

	//get the contact for this page
	$params = array(
		'contact_id'=>$contactID,
	);
	$contacts = &civicrm_contact_get($params);

	//if the contact is a Program add the site staff tab
	if($contacts[$contactID]['contact_sub_type'] == 'Program') {
		$url = CRM_Utils_System::url( 'civicrm/sitestaff/' . $contactID);
		$tabs[] = array('id' => 'siteStaff',
										'url' => $url,
										'title' => "Site Staff",
										'weight' => 2);
	}
}

/**
 * Implementation of hook_menu()
 */

function ybcivi_menu() {
	$items = array();

	//Add an entry for the site staff menu
	$items['civicrm/sitestaff/%'] = array(
		'title' => 'Site Staff',
		'description' => 'staff for each site',
		'page callback' => 'ybcivi_site_staff_page',
		'page arguments' => array(2),
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);

	return $items;
}

function ybcivi_site_staff_page($contactId) {
	//initialize civicrm api
	civicrm_initialize();
	$config =& CRM_Core_Config::singleton( );
	require_once "api/v2/Relationship.php";

	$params = array(
		'contact_id'=>$contactId,
	);

	//get the 'Site Staff is' relationships to the given contact
	$relationships = &civicrm_contact_relationship_get(
		$params, 
		array(),
		array('Site Staff is')
	);

	//Find the custom field Id
	$result = db_query("SELECT id, option_group_id FROM {civicrm_custom_field} WHERE name = '%s'", 'Relationship_Roles');
	$row = db_fetch_object($result);
	$custom = $row->id;
	$option_group_id = $row->option_group_id;

	//Fetch the display labels for the site staff roles
	//this is option group 83 in local database
	$result = db_query('SELECT label, value FROM {civicrm_option_value} WHERE option_group_id = %d ORDER BY weight', $option_group_id);

	//Initialize the role arrays with the label names
	$roles = array();
	while ($opt = db_fetch_object($result)) {
		$roles[$opt->value] = array(
			'label' => $opt->label,
			'contacts' => array(),
		);
	}
	//Add a 'staff' role to the end of the array, for staff which do not
	//have a special role
	$roles['staff'] = array(
		'label' => "Staff",
		'contacts' => array(),
	);

	//Add site staff to roles array
	foreach($relationships['result'] as $contact) {
		//skip inactive or past date roles, these can still be seen on the
		//relationships tab
		if($contact['is_active'] == '1' && ($contact['end_date'] == NULL || $contact['end_date'] > date('Y-m-d')) ) {

			//find the custom data set key
			$k = preg_grep("/^custom_" . $custom . "_/", array_keys($contact), 0);
			//preg_grep returns matchIndex -> array value.  In this case I just
			//want the value, so i reset the array (which sets the array pointer
			//to the first element of the array)
			$k = reset($k);

			if(count($contact[$k]) > 0) {
				//If there are values for the custom data field, add the contact
				//to the appropriate roles in the roles array
				foreach($contact[$k] as $key => $value) {
					if($value == 1)
						$roles[$key]['contacts'][] = $contact;
				}
			} else {
				//if the user has no custom data fields, then add them to the
				//general 'staff' role.
				$roles['staff']['contacts'][] = $contact;
			}
		}
	}

	//Theme the roles array using page_site_staff_page
	return theme('page_site_staff_page', $roles);
}

/**
 * Implementation of hook_theme()
 */

function ybcivi_theme() {
	//register pag_site_Staff_page to the theme engine
	return array(
		'page_site_staff_page' => array(
			'arguments' => array('roles' => null),
			'template' => 'page-site-staff-page',
			'path' => drupal_get_path('module', 'ybcivi'),
		),
	);
}

/**
 * Implementation of hook_views_query_alter()
 */

function ybcivi_views_query_alter ( &$view, &$query) {
	if($view->name == 'site_staff') {
		$view->query->add_where('adv_filter',
			"(civicrm_relationship.end_date IS NULL OR civicrm_relationship.end_date >= NOW())");
		$view->query->set_group_operator("AND");
	}
}


